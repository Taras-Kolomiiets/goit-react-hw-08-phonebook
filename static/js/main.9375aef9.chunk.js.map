{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/FormButton/FormButton.tsx","redux/contacts/contacts-slice.ts","components/ContactForm/ContactForm.tsx","components/ContactList/ContactList.tsx","components/Filter/Filter.tsx","App.tsx","redux/store.ts","index.tsx","components/ContactList/ContactList.module.css","components/FormButton/FormButton.module.css","components/Filter/Filter.module.css"],"names":["module","exports","FormButton","type","onClick","disabled","children","allProps","className","s","button","contactsApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","getContacts","query","filterStr","providesTags","deleteContact","mutation","id","url","method","invalidatesTags","createContact","newContact","body","useGetContactsQuery","useDeleteContactMutation","useCreateContactMutation","ContactForm","contacts","addContactToPhonebook","name","phone","toLowerCase","filter","contact","includes","length","isInContacts","alert","initialValues","validationSchema","Yup","required","matches","onSubmit","values","resetForm","form","label","fieldInput","placeholder","component","validatorError","ContactList","onDelete","list","map","item","itemName","itemPhone","size","Filter","filterContacts","useState","filterValue","setFilterValue","useEffect","value","onChange","e","target","App","setFilter","data","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9375aef9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"fieldInput\":\"ContactForm_fieldInput__3zV51\",\"validatorError\":\"ContactForm_validatorError__3ngg1\"};","import React, { FC } from 'react';\nimport s from './FormButton.module.css';\nimport { IButton } from '../../interfaces/IButton';\n\ninterface Props {\n   type?: string,\n  onClick?: () => void,\n  disabled?: boolean,\n  children?: any\n}\n\nconst FormButton: FC<Props> = ({\n  type = 'button',\n  onClick,\n  disabled = false,\n  children,\n  ...allProps\n}: IButton) => {\n  return (\n    <button\n      type={type}\n      className={s.button}\n      disabled={disabled}\n      onClick={onClick}\n      {...allProps}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default FormButton;\n\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const contactsApi = createApi({\n  reducerPath: 'contactsApi',\n    baseQuery: fetchBaseQuery({ baseUrl: 'https://61ac9aa5d228a9001703ab59.mockapi.io' }),\n  tagTypes: ['Contact'],\n  endpoints: (builder) => ({\n    getContacts: builder.query({\n        query: (filterStr) => `contacts?sortBy=name&name=${filterStr}`,\n        providesTags: ['Contact']\n    }),\n      deleteContact: builder.mutation({\n          query: (id) => ({\n              url: `/contacts/${id}`,\n              method: \"DELETE\",\n          }),\n          invalidatesTags: ['Contact']\n      }),\n      createContact: builder.mutation({\n          query: (newContact) => ({\n              url: '/contacts',\n              method: 'POST',\n              body: newContact\n          }),\n          invalidatesTags: ['Contact']\n      })\n  }),\n})\n\nexport const { useGetContactsQuery, useDeleteContactMutation, useCreateContactMutation } = contactsApi;","import * as Yup from 'yup';\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\nimport FormButton from '../FormButton/FormButton';\nimport s from './ContactForm.module.css';\nimport { useCreateContactMutation } from 'redux/contacts/contacts-slice';\nimport IContacts from 'interfaces/IContacts'\nimport IContact from 'interfaces/IContact'\n\n\nexport default function ContactForm({contacts}: IContacts) {\n  const [createContact] = useCreateContactMutation();\n\n  const isInContacts = (name: string) => {\n    name = name.toLowerCase();\n    return (\n      contacts.filter((contact: IContact) => contact.name.toLowerCase().includes(name))\n        .length > 0\n    );\n  };\n\n  const addContactToPhonebook = ({ name, phone }: {name: string, phone: string}) => {\n    if (isInContacts(name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const contact = {name, phone}\n\n    createContact(contact);\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', phone: '' }}\n        validationSchema={Yup.object({\n          name: Yup.string()\n            .required()\n            .matches(\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n              \"Name can contain only letters, ', - and space.\",\n            ),\n          phone: Yup.string()\n            .required()\n            .matches(\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n              'Phone number should contain only numbers and it also could contain spaces, dash, parenthesis and starts with +',\n            ),\n        })}\n        onSubmit={(values, { resetForm }) => {\n          addContactToPhonebook(values);\n          resetForm();\n        }}\n      >\n        <Form className={s.form}>\n          <label className={s.label}>\n            Name:\n            <Field\n              className={s.fieldInput}\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"enter your name\"\n            />\n            <ErrorMessage\n              name=\"name\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <label className={s.label}>\n            Phone number:\n            <Field\n              className={s.fieldInput}\n              name=\"phone\"\n              type=\"tel\"\n              placeholder=\"enter your phone number\"\n            />\n            <ErrorMessage\n              name=\"phone\"\n              component=\"span\"\n              className={s.validatorError}\n            />\n          </label>\n          <FormButton type=\"submit\">Add contact</FormButton>\n        </Form>\n      </Formik>\n      <hr />\n    </div>\n  );\n}\n","import FormButton from '../FormButton';\nimport { MdDelete } from 'react-icons/md';\nimport s from './ContactList.module.css';\nimport IContacts from 'interfaces/IContacts'\nimport IContact from 'interfaces/IContact';\n\ninterface IContactsList extends IContacts {\n  onDelete: (id: string) => void\n}\n\nexport default function ContactList({contacts, onDelete}: IContactsList) {\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, phone }: IContact) => (\n        <li key={id} className={s.item}>\n          <span className={s.itemName}>{name}</span>\n          <span className={s.itemPhone}>{phone}</span>\n          <FormButton\n            onClick={() => onDelete(id)}\n            aria-label=\"Delete contact\"\n          >\n            <MdDelete size=\"18\" />\n          </FormButton>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import {useState, useEffect } from 'react';\nimport s from './Filter.module.css';\n\ninterface IFilter {\n  filterContacts: (query: string) => void\n}\n\nexport default function Filter({ filterContacts }: IFilter) {\n  const [filterValue, setFilterValue] = useState<string>(\"\");\n\n  useEffect(() => {\n    filterContacts(filterValue);\n  }, [filterValue, filterContacts]);\n\n  const handleChangeFilter = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilterValue(e.target.value);\n  };\n    return (\n      <div>\n        <label>\n          Find contacts by name:\n          <input\n            type=\"text\"\n            name=\"filter\"\n            value={filterValue}\n            onChange={handleChangeFilter}\n            className={s.fieldInput}\n          />\n        </label>\n      </div>\n    );\n  }\n\n","import './App.css';\nimport {useState} from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport { useDeleteContactMutation, useGetContactsQuery } from 'redux/contacts/contacts-slice';\n\nexport default function App() {\n  const [filter, setFilter] = useState<string>(\"\");\n\n  const { data } = useGetContactsQuery(filter);\n  const [deleteContact] = useDeleteContactMutation();\n\n  const filterContacts = (query: string) => {\n    setFilter(query);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm contacts={data}/>\n\n      <h2>Contacts</h2>\n      <Filter filterContacts={filterContacts}/>\n     {data && <ContactList contacts={data} onDelete={deleteContact} />}\n    </div>\n  );\n}\n","import logger from 'redux-logger';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { contactsApi } from './contacts/contacts-slice';\n\nconst middleware = [\n  ...getDefaultMiddleware(),\n  logger,\n  contactsApi.middleware,\n];\n\nexport const store = configureStore({\n  reducer: {\n    [contactsApi.reducerPath]: contactsApi.reducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport {store} from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\",\"itemName\":\"ContactList_itemName__3linx\",\"itemPhone\":\"ContactList_itemPhone__2aABR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FormButton_button__2-gNS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldInput\":\"Filter_fieldInput__1at_C\"};"],"sourceRoot":""}